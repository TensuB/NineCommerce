@model LoginModel
@using Nop.Core
@using Nop.Core.Domain.Customers

@inject IWebHelper webHelper
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    Html.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register", new { returnUrl = this.Context.Request.Query["returnUrl"] }, webHelper.CurrentRequestProtocol);
}
<section class="bg-light separator-top section-cover">
    <div class="container">
        <div class="row justify-content-left" >

        <div class="col-12 mt-10 text-center">
            <h1>@T("Account.Login.Welcome")</h1>                   
        </div>
        <div class="col-12 text-left" style="margin-top:4em;">
            <div class="customer-blocks">
            @if (Model.RegistrationType == UserRegistrationType.Disabled)
            {
                <div class="new-wrapper col-sl-12 col-md-6 col-lg-4">
                    <div class="col">
                        <h2> @T("Account.Register") </h2>
                    </div>
                    <div class="col text-left text">
                        <p>@T("Account.Register.Result.Disabled") </p>                      
                    </div>
                </div>
            }
            else if (Model.CheckoutAsGuest)
            {
                <div class="new-wrapper checkout-as-guest-or-register-block col-sl-12 col-md-6 col-lg-4">
                    <div class="col">
                        <h2>@T("Account.Login.CheckoutAsGuestOrRegister")</h2>
                    </div>
                    <div class="col text-left text">
                        <p>
                        @await Component.InvokeAsync("TopicBlock", new { systemName = "CheckoutAsGuestOrRegister" })    
                        </p>                      
                    </div>
                    <div class="buttons">   
                    <button type="button" class="btn btn-green btn-rounded px-5"                         
                            onclick="location.href='@Url.RouteUrl("Checkout")'">
                            @T("Account.Login.CheckoutAsGuest")
                    </button>
                    <button type="button" class="btn btn-green btn-rounded px-5" 
                            onclick="location.href='@registerUrl'">
                        @T("Account.Register")
                    </button>
                    </div>
                </div>
            }
            else
            {
                <div class="new-wrapper register-block col-sl-12 col-md-6 col-lg-5">
                    <div class="col">
                    <h2>@T("Account.Login.NewCustomer")</h2>
                        <hr/>
                    </div>
                    <div class="col text-left text">
                        <p> @T("Account.Login.NewCustomerText")</p> 
                        <p>&nbsp;</p>
                    </div>
                    <div class="text-center text-md-left">
                        <button type="button" class="btn btn-green btn-rounded px-5" 
                                onclick="location.href='@registerUrl'">@T("Account.Register")
                        </button>
                    </div>
                </div>
            }

            <div class="returning-wrapper fieldset col-sl-12 col-md-6 col-lg-7">
                <form asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" autocomplete="off">
                    <div asp-validation-summary="ModelOnly" class="message-error">@T("Account.Login.Unsuccessful")</div>
                    <div class="col align-items-center title">
                    <h2>@T("Account.Login.ReturningCustomer")</h2>
                    </div>
                    <div class="col text-left form-fields">
                        @if (Model.UsernamesEnabled)
                        {
                            <div class="form-group inputs">
                                <label asp-for="Username" asp-postfix=":" ></label>
                                <input asp-for="Username" class="username form-control" autofocus="autofocus" />
                                <span asp-validation-for="Username"></span>
                            </div>
                        }
                        else
                        {
                            <div class="inputs">
                                <label asp-for="Email" asp-postfix=":" ></label>
                                <input asp-for="Email" class="email form-control" autofocus="autofocus" />
                                <span asp-validation-for="Email"></span>
                            </div>
                        }
                        <div class="inputs">
                            <label asp-for="Password" asp-postfix=":" ></label>
                            <input asp-for="Password" class="password form-control" />
                            <span asp-validation-for="Password"></span>
                        </div>
                        <div class="inputs reversed">
                            <input  type="checkbox" asp-for"RememberMe" style="margin:0;"/>
                            <label style="width:100%;" asp-for="RememberMe"></label>
                            <span class="forgot-password">
                                <a asp-route="PasswordRecovery">@T("Account.Login.ForgotPassword")</a>
                            </span>
                        </div>
                        @if (Model.DisplayCaptcha)
                        {
                            <nop-captcha />
                        }
                    </div>
                    <div class="text-center text-md-left">
                         <button type="submit" class="btn btn-green btn-rounded px-5">@T("Account.Login.LoginButton")</button>
                    </div>
                </form>
            </div>
        </div>
                <div class="external-authentication col-12 ">
                    @await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication")
                </div>
                @await Component.InvokeAsync("TopicBlock", new { systemName = "LoginRegistrationInfo" })
            </div>
        </div>
    </div>
</section>